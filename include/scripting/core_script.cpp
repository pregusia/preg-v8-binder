/*
 * Copyright (c) preg-v8-binder <https://github.com/pregusia/preg-v8-binder>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


#include "engine.h"

const char* scripting::Engine::CORE_SCRIPT = ""
"function CoreObject() { }\n"
"function $(v0,v1,v2,v3) {\n"
"	obj = new CoreObject();\n"
"	obj.arg = v0;\n"
"	obj.arg0 = v0;\n"
"	obj.arg1 = v1;\n"
"	obj.arg2 = v2;\n"
"	obj.arg3 = v3;\n"
"	return obj;\n"
"}\n"
"CoreObject.prototype.bind = function(eventName, func) {\n"
"	if (typeof(func) != 'function') return;\n"
"	var adder = function(obj, eventName, func) {\n"
"		if (!obj.hasOwnProperty('events')) Object.defineProperty(obj, 'events', { writable: true, enumerable: true, configurable: true, value: { } });\n"
"		if (!obj.events[eventName]) obj.events[eventName] = [ ];\n"
"		obj.events[eventName].push(func);\n"
"	};\n"
"	if (typeof(this.arg) == 'function') {\n"
"		// bind to prototype\n"
"		var proto = this.arg.prototype;\n"
"		if (proto) adder(proto, eventName, func);		\n"
"	}\n"
"	if (typeof(this.arg) == 'object') {\n"
"		adder(this.arg, eventName, func);\n"
"	}\n"
"};\n"
"CoreObject.prototype.unbind = function(eventName, func) {\n"
"	if (typeof(func) != 'function') return;\n"
"	var remover = function(obj, eventName, func) {\n"
"		if (!obj.hasOwnProperty('events')) return;\n"
"		if (!obj.events[eventName]) return;\n"
"		var index = obj.events[eventName].indexOf(func);\n"
"		if (index >= 0) {\n"
"			obj.events[eventName].splice(index, 1);\n"
"		}\n"
"	};\n"
"	if (typeof(this.arg) == 'function') {\n"
"		// bind to prototype\n"
"		var proto = this.arg.prototype;\n"
"		if (proto) remover(proto, eventName, func);\n"
"	}\n"
"	if (typeof(this.arg) == 'object') {\n"
"		remover(this.arg, eventName, func);\n"
"	}	\n"
"};\n"
"CoreObject.prototype.eventCall = function(eventName) {\n"
"	var args = Array.prototype.slice.call(arguments);\n"
"	args.splice(0, 0, this.arg);\n"
"	return $.eventCallStatic.apply(this, args);\n"
"};\n"
"$.eventCallStatic = function(obj,eventName) {\n"
"	if (typeof(obj) == 'object') {\n"
"		var org = obj;\n"
"		var ok = false;\n"
"		var args = Array.prototype.slice.call(arguments);\n"
"		args.splice(0, 2);\n"
"		do {\n"
"			if (obj.hasOwnProperty('events')) {\n"
"				if (obj.events[eventName]) {\n"
"					$.each(obj.events[eventName], function(k,v){\n"
"						v.apply(org, args);\n"
"						ok = true;\n"
"					});\n"
"				}\n"
"			}\n"
"		} while(obj = Object.getPrototypeOf(obj));\n"
		"\n"
"		return ok;\n"
"	}\n"
"	return false;\n"
"}\n"
"$.eventCallStaticReverse = function(obj,eventName) {\n"
"	if (typeof(obj) == 'object') {\n"
"		var org = obj;\n"
"		var ok = false;\n"
"		var args = Array.prototype.slice.call(arguments);\n"
"		var calls = [ ];\n"
"		args.splice(0, 2);\n"
		"\n"
"		do {\n"
"			if (obj.hasOwnProperty('events')) {\n"
"				if (obj.events[eventName]) {\n"
"					$.each(obj.events[eventName], function(k,v){\n"
"						calls.push(v);\n"
"						ok = true;\n"
"					});\n"
"				}\n"
"			}\n"
"		} while(obj = Object.getPrototypeOf(obj));\n"

"		calls.reverse();\n"
		"\n"
"		$(calls).each(function(k,v){\n"
"			v.apply(org, args);\n"
"		});\n"
		"\n"
"		return ok;\n"
"	}\n"
"	return false;\n"
"}\n"
"CoreObject.prototype.extendTo = function(newName, obj) {\n"
"	if (typeof(this.arg) != 'function') return null;\n"
"	var proto = this.arg.prototype;\n"
"	if (!proto) return;\n"
	"\n"
"	extend(this.arg.__protoName, newName);\n"
	"\n"
"	if (typeof(obj) == 'object') {\n"
"		var global = Function('return this')() || (42, eval)('this');\n"
"		var newFunc = $.resolvePropertyChain(global, newName);\n"
"		if (typeof(newFunc) == 'function') {\n"
"			var newProto = newFunc.prototype;\n"
		"\n"
"			for(var k in obj) {\n"
"				if (obj.hasOwnProperty(k)) {\n"
"					var v = obj[k];\n"
"					if (typeof(v) == 'function') {\n"
"						if (k == 'ctor') {\n"
"							// ctor traktujemy jak event\n"
"							$(newFunc).bind(k, v);\n"
"						} else {\n"
"							Object.defineProperty(newProto, k, { writable: true, enumerable: true, configurable: true, value: v });\n"
"						}\n"
"					}\n"
"				}\n"
"			}\n"
		"\n"
"			if (obj.EVENTS) {\n"
"				for(var k in obj.EVENTS) {\n"
"					if (obj.EVENTS.hasOwnProperty(k)) {\n"
"						var v = obj.EVENTS[k];\n"
"						$(newFunc).bind(k, v);\n"
"					}\n"
"				}\n"
"			}\n"
			"\n"
"			if (obj.STATIC) {\n"
"				for(var k in obj.STATIC) {\n"
"					if (obj.STATIC.hasOwnProperty(k)) {\n"
"						var v = obj.STATIC[k];\n"
"						if (typeof(v) == 'function') {\n"
"							Object.defineProperty(newFunc, k, { writable: true, enumerable: true, configurable: true, value: v });\n"
"						}\n"
"					}\n"
"				}\n"
"			}\n"
			"\n"
"			if (obj.PROPERTIES) {\n"
"				for(var k in obj.PROPERTIES) {\n"
"					if (obj.PROPERTIES.hasOwnProperty(k)) {\n"
"						var v = obj.PROPERTIES[k];\n"
"						if (typeof(v) == 'function') {\n"
"							Object.defineProperty(newProto, k, { get: v });\n"
"						}\n"
"					}\n"
"				}\n"
"			}\n"
"		}\n"
"	}\n"
"};\n"
"CoreObject.prototype.adapt = function(obj) {\n"
"	if (typeof(this.arg) != 'function') return;\n"
"	var proto = this.arg.prototype;\n"
"	if (!proto) return;\n"

"	for(var k in obj) {\n"
"		if (obj.hasOwnProperty(k)) {\n"
"			var v = obj[k];\n"
"			if (typeof(v) == 'function') {\n"
"				if (k == 'ctor') {\n"
"					// ctor traktujemy jak event\n"
"					$(this.arg).bind(k, v);\n"
"				} else {\n"
"					Object.defineProperty(proto, k, { writable: true, enumerable: true, configurable: true, value: v });\n"
"				}\n"
"			}\n"
"		}\n"
"	}\n"

"	if (obj.EVENTS) {\n"
"		for(var k in obj.EVENTS) {\n"
"			if (obj.EVENTS.hasOwnProperty(k)) {\n"
"				var v = obj.EVENTS[k];\n"
"				$(this.arg).bind(k, v);\n"
"			}\n"
"		}\n"
"	}\n"
	"\n"
"	if (obj.STATIC) {\n"
"		for(var k in obj.STATIC) {\n"
"			if (obj.STATIC.hasOwnProperty(k)) {\n"
"				var v = obj.STATIC[k];\n"
"				if (typeof(v) == 'function') {\n"
"					Object.defineProperty(this.arg, k, { writable: true, enumerable: true, configurable: true, value: v });\n"
"				}\n"
"			}\n"
"		}\n"
"	}\n"
	"\n"
"	if (obj.PROPERTIES) {\n"
"		for(var k in obj.PROPERTIES) {\n"
"			if (obj.PROPERTIES.hasOwnProperty(k)) {\n"
"				var v = obj.PROPERTIES[k];\n"
"				if (typeof(v) == 'function') {\n"
"					Object.defineProperty(proto, k, { get: v });\n"
"				}\n"
"			}\n"
"		}\n"
"	}\n"
"};\n"

"$.proxy = function(func, obj) {\n"
"	if (typeof(func) != 'function') return function() { };\n"
"	if (!obj) obj = this;\n"
"	return function() { return func.apply(obj, arguments); }\n"
"};\n"

"$.each = function(arr, func) {\n"
"	if (typeof(func) != 'function') return;\n"
"	if (!arr) return;\n"
	"\n"
"	var idx = 0;\n"
"	for(var I in arr) {\n"
"		if (arr.hasOwnProperty(I)) {\n"
"			func.call(arr[I], I, arr[I], idx);\n"
"			idx += 1;\n"
"		}\n"
"	}\n"
"};\n"

"$.resolvePropertyChain = function(obj, name) {\n"
"	if (!name) return obj;\n"
"	var arr = name.split('.');\n"
"	for(var i=0;i<arr.length;++i) {\n"
"		obj = obj[arr[i]];\n"
"	}\n"
"	return obj;\n"
"};\n"

"CoreObject.prototype.each = function(func) {\n"
"	if (typeof(func) != 'function') return;\n"
"	if (!this.arg) return;\n"
	"\n"
"	var idx = 0;\n"
"	for(var I in this.arg) {\n"
"		if (this.arg.hasOwnProperty(I)) {\n"
"			func.call(this.arg[I], I, this.arg[I], idx);\n"
"			idx += 1;\n"
"		}\n"
"	}\n"
"};\n"

"CoreObject.prototype.clone = function() {\n"
"	var res = { };\n"
"	for(var I in this.arg) {\n"
"		if (this.arg.hasOwnProperty(I)) {\n"
"			res[I] = this.arg[I];\n"
"		}\n"
"	}\n"
"	return res;\n"
"};\n";

